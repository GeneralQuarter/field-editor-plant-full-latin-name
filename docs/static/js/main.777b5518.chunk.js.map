{"version":3,"sources":["components/ConfigScreen.tsx","components/Field.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Field","field","genusField","entry","fields","speciesField","varietyCultivarField","updateFullLatinName","genus","getValue","species","varietyCultivar","newValue","setValue","useEffect","onValueChanged","baseSdk","isInitiallyDisabled","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","forEach","componentLocationSetting","is","window","startAutoResizer","render"],"mappings":"2TAeqBA,E,kDACnB,WAAYC,GAAqB,IAAD,8BAC9B,cAAMA,IAqBRC,YAtBgC,sBAsBlB,4BAAAC,EAAA,sEAOe,EAAKF,MAAMG,IAAIC,IAAIC,kBAPlC,cAONC,EAPM,yBASL,CAELC,WAAY,EAAKC,MAAMD,WAGvBE,YAAaH,IAdH,2CApBZ,EAAKE,MAAQ,CAAED,WAAY,IAK3BP,EAAMG,IAAIC,IAAIH,aAAY,kBAAM,EAAKA,iBAPP,E,4FAUhC,mCAAAC,EAAA,sEAG6DQ,KAAKV,MAAMG,IAAIC,IAAIO,gBAHhF,OAGQJ,EAHR,OAKEG,KAAKE,SAASL,EAAa,CAAEA,cAAeG,KAAKF,OAAO,WAGtD,EAAKR,MAAMG,IAAIC,IAAIS,cARvB,gD,0EA8BA,WACE,OACE,cAAC,IAAD,CAAWC,UAAWC,YAAI,CAAEC,OAAQ,SAApC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,kDACA,cAAC,IAAD,+D,GA9C0BC,a,QC+CrBC,EArDD,SAAC,GAAuB,IAAtBf,EAAqB,EAArBA,IACRgB,EAAQhB,EAAIgB,MAEZC,EAAajB,EAAIkB,MAAMC,OAAV,MACbC,EAAepB,EAAIkB,MAAMC,OAAV,QACfE,EAAuBrB,EAAIkB,MAAMC,OAAV,gBAEvBG,EAAsB,WAC1B,IAAMC,EAAQN,EAAWO,WACnBC,EAAUL,EAAaI,WACvBE,EAAkBL,EAAqBG,WAE7C,GAAKD,GAAUE,EAAf,CAKA,IAAME,EAAQ,UAAMJ,EAAN,YAAeE,GAAf,OAAyBC,EAAe,YAAQA,EAAR,KAA6B,IAE/EV,EAAMQ,aAAeG,GAIzBX,EAAMY,SAASD,QAVbX,EAAMY,SAAS,KAqCnB,OAxBAC,qBAAU,WAKR,OAJcZ,EAAWa,gBAAe,WACtCR,UAMJO,qBAAU,WAKR,OAJcT,EAAaU,gBAAe,WACxCR,UAMJO,qBAAU,WAKR,OAJcR,EAAqBS,gBAAe,WAChDR,UAMG,cAAC,IAAD,CAAYS,QAAS/B,EAAKgB,MAAOA,EAAOgB,qBAAqB,KC1CtEC,gBAAK,SAACjC,GACJ,IAAMkC,EAAOC,SAASC,eAAe,QAEH,CAChC,CACEC,SAAUC,YAAUC,oBACpBC,UAAW,cAAC,EAAD,CAAQxC,IAAKA,KAE1B,CACEqC,SAAUC,YAAUG,qBACpBD,UAAW,cAAC,EAAD,CAAOxC,IAAKA,MAKD0C,SAAQ,SAACC,GAC7B3C,EAAIqC,SAASO,GAAGN,YAAUG,uBAC3BzC,EAA0B6C,OAAOC,mBAGhC9C,EAAIqC,SAASO,GAAGD,EAAyBN,WAC3CU,iBAAOJ,EAAyBH,UAAWN,W","file":"static/js/main.777b5518.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from '@contentful/app-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>Field Editor: Plant Full Latin Name</Heading>\n          <Paragraph>No additional configuration required :)</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React from 'react';\nimport { FieldExtensionSDK } from '@contentful/app-sdk';\nimport { SlugEditor } from '@contentful/field-editor-slug';\nimport { useEffect } from 'react';\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = ({sdk}: FieldProps) => {\n  const field = sdk.field;\n\n  const genusField = sdk.entry.fields['genus'];\n  const speciesField = sdk.entry.fields['species'];\n  const varietyCultivarField = sdk.entry.fields['varietyCultivar'];\n\n  const updateFullLatinName = () => {\n    const genus = genusField.getValue() as string;\n    const species = speciesField.getValue() as string;\n    const varietyCultivar = varietyCultivarField.getValue() as string;\n\n    if (!genus || !species) {\n      field.setValue('');\n      return;\n    }\n\n    const newValue = `${genus} ${species}${varietyCultivar ? ` '${varietyCultivar}'` : ''}`;\n\n    if (field.getValue() === newValue) {\n      return;\n    }\n\n    field.setValue(newValue);\n  };\n\n  useEffect(() => {\n    const unsub = genusField.onValueChanged(() => {\n      updateFullLatinName();\n    });\n\n    return unsub;\n  });\n\n  useEffect(() => {\n    const unsub = speciesField.onValueChanged(() => {\n      updateFullLatinName();\n    });\n\n    return unsub;\n  });\n\n  useEffect(() => {\n    const unsub = varietyCultivarField.onValueChanged(() => {\n      updateFullLatinName();\n    });\n\n    return unsub;\n  });\n\n  return <SlugEditor baseSdk={sdk} field={field} isInitiallyDisabled={true} />\n}\n\nexport default Field;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport Field from './components/Field';\n\ninit((sdk) => {\n  const root = document.getElementById('root');\n\n  const ComponentLocationSettings = [\n    {\n      location: locations.LOCATION_APP_CONFIG,\n      component: <Config sdk={sdk as AppExtensionSDK} />,\n    },\n    {\n      location: locations.LOCATION_ENTRY_FIELD,\n      component: <Field sdk={sdk as FieldExtensionSDK} />,\n    },\n  ];\n\n  // Select a component depending on a location in which the app is rendered.\n  ComponentLocationSettings.forEach((componentLocationSetting) => {\n    if (sdk.location.is(locations.LOCATION_ENTRY_FIELD)) {\n      (sdk as FieldExtensionSDK).window.startAutoResizer();\n    }\n    \n    if (sdk.location.is(componentLocationSetting.location)) {\n      render(componentLocationSetting.component, root);\n    }\n  });\n});\n"],"sourceRoot":""}